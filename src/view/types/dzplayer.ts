import { Episode, Repeat, Song } from '../../common/types/deezer';

type DZPlayerControl = {
  canSeek: () => boolean;
  getAudioQuality: () => string;
  loadLyrics: () => void;
  mute: (e: unknown) => void;
  nextSong: () => void;
  pause: () => void;
  play: () => void;
  prevSong: () => void;
  seek: (position: number) => void;
  setAudioQuality: (e: unknown) => void;
  setNormalized: (e: unknown) => void;
  setRepeat: (repeat: Repeat) => void;
  setShuffle: (e: unknown) => void;
  setSmartNotLike: () => void;
  setVolume: (volume: number) => void;
  stop: () => void;
  togglePause: () => void;
};

type DZPlayerHelper = {
  getTrackTypeByIndex: (e: unknown) => string;
  isPlayingFlow: () => boolean;
  isPlayingUserFlow: () => boolean;
};

type DZPlayerHTML5 = {
  flac: boolean;
  init: () => unknown;
  supported: boolean;
};

type Chromecast = {
  isLoading: () => boolean;
};

export type DZPlayer = {
  LOG_INTERVAL_LIVE_STREAM: number;
  LOG_UID: number;
  SUPPORTED_CODECS: Array<string>;
  addNextTracks: (e: unknown, t: unknown) => void;
  appId: number;
  appType: string;
  audioAds: null;
  cached: object;
  chromecast: Chromecast;
  context: object;
  control: DZPlayerControl;
  cover: string;
  currentLinkedDevice: null;
  duration: number;
  enqueueTracks: (e: unknown, t: unknown) => unknown;
  fetchRecommendations: (e: unknown) => unknown;
  fingerprintSubscribe: () => void;
  getAlbumTitle: () => string;
  getArtistName: () => string;
  getContext: (e: unknown) => unknown;
  getContextByIndex: (e: unknown) => unknown;
  getContextByIndexFromOriginal: (e: unknown) => unknown;
  getCover: () => string;
  getCurrentSong: () => Song | Episode | null;
  getDuration: () => string;
  getExactPosition: () => string;
  getIndexSong: () => number;
  getLinkedDevice: () => unknown;
  getLivestreamData: (e: unknown) => unknown;
  getLogType: () => 'song' | 'episode';
  getLyrics: () => null;
  getLyricsMetadata: () => null;
  getMediaId: () => string;
  getMediaType: () => string;
  getNbSongs: () => number;
  getNbSongsTotal: () => number;
  getNextSong: () => Song | Episode;
  getOutputByContextPage: (e: unknown) => string;
  getPlayerType: () => string;
  getPlayerTypeId: () => number;
  getPosition: () => number;
  getPrevSong: () => Song | Episode | null;
  getRadioId: () => unknown;
  getRadioType: () => unknown;
  getRemainingTime: () => number;
  getRepeat: () => Repeat;
  getSongId: () => string;
  getSongTitle: () => string;
  getTotalDuration: () => number;
  getTrackList: (e: unknown, t: unknown) => Array<Song> | Array<Episode> | null;
  getTrackListDuration: () => number;
  getTrackListIndex: () => number;
  getTrackListType: () => string;
  getVolume: () => number;
  hasAudioAds: boolean;
  hasLoadedLyrics: () => boolean;
  hasLyrics: () => boolean;
  hasSyncLyrics: () => boolean;
  hasValidLicense: () => boolean;
  helper: DZPlayerHelper;
  html5: DZPlayerHTML5;
  isAdvertisingAllowed: () => boolean;
  isLastSong: () => boolean;
  isLimited: () => boolean;
  isLoading: () => boolean;
  isMuted: () => boolean;
  isPaused: () => boolean;
  isPlaying: () => boolean;
  isRadio: () => boolean;
  isShuffle: () => boolean;
  isWidget: () => boolean;
  lastPosition: number;
  loadTracks: (e: unknown) => unknown;
  loading: boolean;
  logManager: (e: unknown) => unknown;
  logStartedTrack: () => unknown;
  logTrack: object;
  logTrackTemplate: unknown;
  muted: boolean;
  nbSongs: number;
  nextSongInfo: Array<unknown>;
  noAudioAds: () => void;
  numSong: number;
  onAudioAdsReady: () => unknown;
  onGetLiveStreamTrack: (e: unknown, t: unknown) => unknown;
  onInterstitialAdsReady: () => unknown;
  onLoadedTracks: (e: unknown, t: unknown) => unknown;
  orderTracks: (e: unknown) => unknown;
  paused: boolean;
  play: () => void;
  playTrackAtIndex: (e: unknown) => unknown;
  playerLoaded: boolean;
  playerType: string;
  playing: boolean;
  position: number;
  pourcentLoaded: number;
  previousPlayerType: string;
  previousSkipAction: string;
  radioSkipCounter: number;
  radioSkipInterval: number;
  radioSkipIntervalId: number;
  radioSkipSetTimer: () => unknown;
  radioStartListen: (e: unknown, t: unknown) => unknown;
  radioType: string;
  removeTracks: (e: unknown, t: unknown) => unknown;
  renewLicense: () => unknown;
  renewToken: (e: unknown) => unknown;
  repeat: number;
  replaceTracks: (e: unknown, t: unknown, r: unknown) => unknown;
  restoreSetting: (e: unknown) => unknown;
  sendFile: (e: unknown) => unknown;
  sendLog: (e: unknown, t: unknown) => unknown;
  setApp: (e: unknown) => void;
  setAppId: (e: unknown) => void;
  setEmptyPlayer: () => void;
  setForbiddenListen: () => void;
  setIndexSong: (e: unknown) => void;
  setLinkedDevice: (e: unknown) => void;
  setLogCacheStatus: (e: unknown) => void;
  setLogQuality: (e: unknown) => void;
  setNbSongsTotal: (e: number) => void;
  setOffline: (e: boolean) => void;
  setPlayerType: (e: unknown) => unknown;
  setPropValue: (e: unknown, t: unknown) => void;
  setTrackList: (e: unknown, t: unknown, r: unknown) => void;
  setTrackListType: (e: unknown) => void;
  setTriforceIndex: (e: unknown) => void;
  setTriforceState: (e: unknown) => void;
  setUserLogged: (e: unknown) => void;
  setUserUnlogged: () => void;
  shuffle: boolean;
  songId: number;
  stopAudioAds: () => void;
  trigger: (e: unknown, ...args: unknown[]) => unknown;
  user_status: unknown;
  volume: number;
  _adsPosInterval: null;
  _getFilteredTrackListData: (e: unknown) => unknown;
  _play: (e: unknown, t: unknown) => unknown;
  _setAudioAdsProgression: (e: unknown) => void;
  _startAudioAds: () => unknown;
};
