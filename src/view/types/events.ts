type PlayerEvents = {
  adsVastPlaying: 'EVENT.PLAYER.adsVastPlaying';
  changePlayerType: 'EVENT.PLAYER.changePlayerType';
  displayCurrentSong: 'EVENT.PLAYER.displayCurrentSong';
  displayEmptyPlayer: 'EVENT.PLAYER.displayEmptyPlayer';
  displayNextSong: 'EVENT.PLAYER.displayNextSong';
  displayRecognizedTrack: 'EVENT.PLAYER.displayRecognizedTrack';
  duration: 'EVENT.PLAYER.duration';
  error: 'EVENT.PLAYER.error';
  fading: 'EVENT.PLAYER.fading';
  finish: 'EVENT.PLAYER.finish';
  finishAds: 'EVENT.PLAYER.finishAds';
  finishPreview: 'EVENT.PLAYER.finishPreview';
  finishTrackList: 'EVENT.PLAYER.finishTrackList';
  forceCloseMix: 'EVENT.PLAYER.forceCloseMix';
  licenseChanged: 'EVENT.PLAYER.license_changed';
  loading: 'EVENT.PLAYER.loading';
  log: 'EVENT.PLAYER.log';
  log_offline: 'EVENT.PLAYER.log_offline';
  mute_changed: 'EVENT.PLAYER.mute_changed';
  normalizedChanged: 'EVENT.PLAYER.normalizedChanged';
  notify: 'EVENT.PLAYER.notify';
  openAudioSettings: 'EVENT.PLAYER.openAudioSettings';
  order_changed: 'EVENT.PLAYER.order_changed';
  paused: 'EVENT.PLAYER.pause';
  play: 'EVENT.PLAYER.play';
  playerLoaded: 'EVENT.PLAYER.playerLoaded';
  playerReady: 'DEFERRED.PLAYER.playerReady';
  playing: 'EVENT.PLAYER.playing';
  position: 'EVENT.PLAYER.position';
  pourcentLoaded: 'EVENT.PLAYER.pourcentLoaded';
  prcPosition: 'EVENT.PLAYER.prcPosition';
  preloadAborted: 'EVENT.PLAYER.preloadAborted';
  preloadComplete: 'EVENT.PLAYER.preloadComplete';
  qualityChanged: 'EVENT.PLAYER.qualityChanged';
  refreshSoundBar: 'EVENT.PLAYER.refreshSoundBar';
  repeat_changed: 'EVENT.PLAYER.repeat_changed';
  resume: 'EVENT.PLAYER.resume';
  seek: 'EVENT.PLAYER.seek';
  seekCompleted: 'EVENT.PLAYER.seekCompleted';
  setTrackList: 'EVENT.PLAYER.setTrackList';
  shuffle_changed: 'EVENT.PLAYER.shuffle_changed';
  trackAddNext: 'EVENT.PLAYER.trackAddNext';
  trackAddToQueue: 'EVENT.PLAYER.trackAddToQueue';
  trackChange: 'EVENT.PLAYER.trackChange';
  trackSkipped: 'EVENT.PLAYER.trackSkipped';
  track_end: 'EVENT.PLAYER.track_end';
  tracklistReset: 'EVENT.PLAYER.tracklistReset';
  tracklist_changed: 'EVENT.PLAYER.tracklist_changed';
  updateCurrentTrack: 'EVENT.PLAYER.updateCurrentTrack';
  updateRestrictTime: 'EVENT.PLAYER.updateRestrictTime';
  user_status: 'EVENT.PLAYER.user_status';
  volume: 'EVENT.PLAYER.volume';
  volume_changed: 'EVENT.PLAYER.volume_changed';
};

export type Events = {
  player: PlayerEvents;
  subscribe: (event: string, callback: () => void) => void;
  trigger: (event: string, ...args: unknown[]) => void;
};
